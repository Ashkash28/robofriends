{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","map","robot","SearchBox","searchChange","type","placeholder","onChange","value","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","prevState","count","state","nextProps","nextState","nextContext","this","color","onClick","Component","Header","ErrorBoundary","hasError","errorInfo","connect","searchRobots","requestRobots","dispatch","onSearchChange","event","text","target","payload","onRequestRobots","fetch","then","response","json","data","catch","useState","setCount","useEffect","filteredRobots","filter","toLowerCase","includes","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14c3f635.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload\n            };\n        default:\n            return state;\n    }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            };\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                isPending: false,\n                robots: action.payload\n            };\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                isPending: false,\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n};","import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map(robot => (\n                    <Card\n                        key={robot.id}\n                        id={robot.id}\n                        name={robot.name}\n                        email={robot.email}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n                value={searchField}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: 800 }}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState((prevState) => ({ count: prevState.count + 1 }));\n    }\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n\n    }\n}\n\nexport default CounterButton;","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\"\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => ({\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n});\n\nfunction App(props) {\n    const { searchField, onSearchChange, robots, onRequestRobots, isPending  } = props;\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        onRequestRobots();\n    }, []);\n\n    const filteredRobots = robots\n        .filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return !isPending ? (\n        <div className='tc'>\n            <Header />\n            <button onClick={() => setCount(count + 1)}>Click Me!</button>\n            <SearchBox searchChange={onSearchChange} />\n            <Scroll>\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n            </Scroll>\n        </div>\n    ) : (\n        <h1>Loading</h1>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n                .then(response => response.json())\n                .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n                .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\nimport './index.css';\nimport App from \"./containers/App\";\n// import reportWebVitals from './reportWebVitals';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}